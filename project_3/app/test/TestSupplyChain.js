// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFisherManID = accounts[1]
    const originFisherManName = "Vitaly Smallnose"
    const originFisherManInfo = "Yellow Tail Tuna Fishing Company"
    const itemCaughtLatitude = "-38.239770"
    const itemCaughtLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Wild Yellow Tail tuna caught in San Diego, CA"
    const productPrice = web3.utils.toWei('1', "ether")
    var itemState = 0
    const buyerID = accounts[2]
    const distributorID = accounts[3]
    const retailerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("FisherMan: accounts[1] ", accounts[1])
    console.log("Buyer: accounts[2] ", accounts[2])
    console.log("Distributor: accounts[3] ", accounts[3])
    console.log("Retailer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a fisher Man to harvest fish", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        //Add Fisher role permissions
        await supplyChain.addFisher(originFisherManID)

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(upc, originFisherManID, originFisherManName, originFisherManInfo, itemCaughtLatitude, itemCaughtLongitude, productNotes, {from: originFisherManID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFisherManID, 'Error: Missing or Invalid originFisherManID')
        assert.equal(resultBufferOne[4], originFisherManName, 'Error: Missing or Invalid originFisherManName')
        assert.equal(resultBufferOne[5], originFisherManInfo, 'Error: Missing or Invalid originFisherManInfo')
        assert.equal(resultBufferOne[6], itemCaughtLatitude, 'Error: Missing or Invalid itemCaughtLatitude')
        assert.equal(resultBufferOne[7], itemCaughtLongitude, 'Error: Missing or Invalid itemCaughtLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a fisherMan to process the fish", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Mark an item as Processed by calling function processtItem()
        await supplyChain.processItem(upc, {from: originFisherManID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a fisherMan to pack the fish", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        //Add Distributor role permissions
        await supplyChain.addDistributor(distributorID)

        // Mark an item as Packed by calling function packItem()
        await supplyChain.packItem(upc, {from: distributorID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
        
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a fisherMan to sell the fish", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        //Add Retail role permissions
        await supplyChain.addRetailer(retailerID)

        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.sellItem(upc, productPrice, {from: retailerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invald item price')
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
          
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a buyer to buy fish", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        //Add Buyer role permissions
        await supplyChain.addBuyer(buyerID)
        
        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyItem(upc, {from: buyerID, value: productPrice})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], buyerID, 'Error: Invalid ownerID')
        assert.equal(resultBufferTwo[6], buyerID, 'Error: Invalid buyerID')
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
    })    

    // 6th Test
    it("Testing smart contract function readyToPickUp() that allows a fisherMam to mark fish as ready for pick up", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Mark an item as ready to pick up by calling function readyToPickUp()
        await supplyChain.readyToPickUp(upc, {from: retailerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
              
    })    
    // 7th Test
    it("Testing smart contract function PickedUp() that allows a fisherMan to mark the item received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Mark an item as pickedUp by calling function itemPickedUp()
        await supplyChain.itemPickedUp(upc,{from: retailerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')
             
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Mark an item as Purchased by calling function purchaseItem()
        await supplyChain.purchaseItem(upc, {from: retailerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')

    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], buyerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFisherManID, 'Error: Missing or Invalid originFisherManID')
        assert.equal(resultBufferOne[4], originFisherManName, 'Error: Missing or Invalid originFisherManName')
        assert.equal(resultBufferOne[5], originFisherManInfo, 'Error: Missing or Invalid originFisherManInfo')
        assert.equal(resultBufferOne[6], itemCaughtLatitude, 'Error: Missing or Invalid itemCaughtLatitude')
        assert.equal(resultBufferOne[7], itemCaughtLongitude, 'Error: Missing or Invalid itemCaughtLongitude')
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid productPrice')
        assert.equal(resultBufferTwo[5], 7, 'Error: Missing or Invalid itemState')
        assert.equal(resultBufferTwo[6], buyerID, 'Error: Missing or Invalid buyerID')
    })

})
